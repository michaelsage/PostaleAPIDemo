<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Alias List</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background-color: #f4f4f4;
        }
        .container {
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        h1 {
            color: #333;
            text-align: center;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
        }
        .button-container {
            text-align: center;
            margin-top: 20px;
        }
        button {
            background-color: #007bff;
            color: white;
            padding: 10px 15px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            margin: 5px;
        }
        button:hover {
            background-color: #0056b3;
        }
        #message {
            margin-top: 10px;
            color: red;
            text-align: center;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Alias List</h1>
        <div class="button-container">
            <button id="fetchMailboxes">Fetch Aliases</button>
            <button id="exportCsv">Export to CSV</button>
        </div>
        <p id="message"></p>
        <div id="mailboxTableContainer">
            <table id="mailboxTable">
                <thead>
                    <tr>
                        <th>Address</th>
                        <th>Name</th>
                        <th>Created</th>
                        <th>Updated</th>
                        <th>Redirect To</th>
                    </tr>
                </thead>
                <tbody>
                    </tbody>
            </table>
        </div>
    </div>

    <script>
        const phpApiUrl = 'get_aliases.php'; // Path to your PHP script

        const mailboxTableBody = document.querySelector('#mailboxTable tbody');
        const messageElement = document.getElementById('message');
        let mailboxesData = []; // To store the fetched data

        async function fetchMailboxes() {
            messageElement.textContent = 'Fetching Aliases...';
            try {
                const response = await fetch(phpApiUrl, {
                    method: 'GET'
                });

                if (!response.ok) {
                    const errorDetails = await response.json();
                    throw new Error(`Server error: ${errorDetails.error || 'Unknown error'}. Status: ${response.status}`);
                }

                const data = await response.json();
                
                if (data.error) {
                    throw new Error(`API error: ${data.error}. Details: ${data.details || 'No details.'}`);
                }

                mailboxesData = data.results || [];
                displayMailboxes(mailboxesData);
                messageElement.textContent = 'Aliases loaded successfully.';
            } catch (error) {
                console.error('Error fetching mailboxes:', error);
                messageElement.textContent = `Error: ${error.message}`;
                mailboxTableBody.innerHTML = '';
            }
        }

        function displayMailboxes(mailboxes) {
            mailboxTableBody.innerHTML = '';
            if (mailboxes.length === 0) {
                mailboxTableBody.innerHTML = '<tr><td colspan="5" style="text-align: center;">No aliases found.</td></tr>';
                return;
            }

            mailboxes.forEach(mailbox => {
                const row = mailboxTableBody.insertRow();
                row.insertCell().textContent = mailbox.address;
                row.insertCell().textContent = mailbox.name;
                row.insertCell().textContent = new Date(mailbox.created).toLocaleString();
                row.insertCell().textContent = new Date(mailbox.updated).toLocaleString();
                
                // Handle the 'redirectTo' array: join elements with a comma or similar
                const redirectToText = Array.isArray(mailbox.redirectTo) 
                                       ? mailbox.redirectTo.join(', ') 
                                       : ''; // Handle if it's not an array or missing
                row.insertCell().textContent = redirectToText;
            });
        }

        function exportToCsv() {
            if (mailboxesData.length === 0) {
                messageElement.textContent = 'No data to export. Please fetch aliases first.';
                return;
            }

            // Dynamically get headers from the first object, including 'redirectTo'
            // If mailboxesData[0] is guaranteed to have all fields, this is fine.
            // If some fields might be missing, you might want a fixed header array.
            const headers = ["address", "name", "created", "updated", "redirectTo"].join(',');

            const rows = mailboxesData.map(row => {
                const values = [];
                values.push(row.address || '');
                values.push(row.name || '');
                values.push(new Date(row.created).toLocaleString() || '');
                values.push(new Date(row.updated).toLocaleString() || '');
                
                // Handle redirectTo for CSV: join elements and properly quote
                const redirectToCsv = Array.isArray(row.redirectTo) 
                                      ? row.redirectTo.map(item => String(item).replace(/"/g, '""')).join('; ') 
                                      : ''; // Use semicolon to separate multiple values in one cell
                values.push(redirectToCsv);

                return values.map(value => {
                    let stringValue = String(value);
                    if (stringValue.includes(',') || stringValue.includes('"') || stringValue.includes('\n')) {
                        stringValue = `"${stringValue.replace(/"/g, '""')}"`;
                    }
                    return stringValue;
                }).join(',');
            });

            const csvContent = [headers, ...rows].join('\n');
            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'aliases.csv';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            messageElement.textContent = 'Data exported to aliases.csv';
        }

        // Event Listeners
        document.getElementById('fetchMailboxes').addEventListener('click', fetchMailboxes);
        document.getElementById('exportCsv').addEventListener('click', exportToCsv);

        // Initial fetch when the page loads
        document.addEventListener('DOMContentLoaded', fetchMailboxes);
    </script>
</body>
</html>
